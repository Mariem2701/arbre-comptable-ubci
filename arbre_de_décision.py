import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# Connexion √† Google Sheets via secrets
@st.cache_resource
def connect_sheet():
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    creds_dict = st.secrets["google_service_account"]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(dict(creds_dict), scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1oLsgO9f-4-b8-VAX_fvX3QVdqjIV0c9yfH-KK4kkmtI").sheet1
    return sheet

sheet = connect_sheet()

# Fonction pour enregistrer chaque r√©ponse
def enregistrer_reponse(question_id, libelle, reponse, service):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([str(question_id), libelle, str(reponse), service, timestamp])











import streamlit as st

st.set_page_config(page_title="UBCI - Arbre Comptable", layout="centered")
st.title("üè¶ UBCI ‚Äì Arbre de D√©cision Comptable Logique")

# SERVICES SIMPLIFI√âS
services = [
    "Demandeur",
    "Comptabilit√© des immobilisations",  # SCI
    "Fournisseurs / Comptabilit√©",
    "Achats",
    "Contr√¥le de gestion",
    "IT / Juridique",
    "RH"
]
service_connecte = st.selectbox("üë§ Connect√© en tant que :", services)

# SESSION STATE
if "reponses" not in st.session_state:
    st.session_state.reponses = {}
if "details_depense" not in st.session_state:
    st.session_state.details_depense = {}
if "description_remplie" not in st.session_state:
    st.session_state.description_remplie = False

r = st.session_state.reponses

# SAISIE D√âPENSE PAR SCI
st.markdown("### üìù Description de la d√©pense")
if service_connecte == "Comptabilit√© des immobilisations" and not st.session_state.description_remplie:
    libelle = st.text_input("üìå Intitul√© de la d√©pense :", key="libelle")
    description = st.text_area("üßæ Description :", key="description")
    if st.button("‚úÖ Enregistrer"):
        if libelle.strip():
            st.session_state.details_depense = {
                "libelle": libelle,
                "description": description
            }
            st.session_state.description_remplie = True
            st.success("‚úÖ D√©pense enregistr√©e.")
        else:
            st.warning("‚ö†Ô∏è Intitul√© requis.")
elif st.session_state.description_remplie:
    st.info(f"üìå **D√©pense** : {st.session_state.details_depense['libelle']}")
    st.markdown(f"üßæ **Description** : {st.session_state.details_depense['description']}")
else:
    st.warning("‚è≥ En attente de saisie par la Comptabilit√© des immobilisations.")
# --- D√âFINITION DE L‚ÄôARBRE LOGIQUE ---
questions = {
    # COMMUNES
    0: ("Montant de la d√©pense (DT)", "number", None, "Demandeur"),
    1: ("La d√©pense concerne-t-elle un bien physique et tangible ?", "radio", ["Oui", "Non"], "Comptabilit√© des immobilisations"),

    # CORPORELLES
    2: ("Utilisation > 1 an ?", "radio", ["Oui", "Non"], "Demandeur"),
    3: ("Avantages √©conomiques futurs ?", "radio", ["Oui", "Non"], "Contr√¥le de gestion"),
    4: ("Co√ªt mesurable ?", "radio", ["Oui", "Non"], "Fournisseurs / Comptabilit√©"),
    5: ("Risques/produits transf√©r√©s ?", "radio", ["Oui", "Non"], "Achats"),
    6: ("Nouvelle acquisition ?", "radio", ["Oui", "Non"], "Achats"),
    7: ("Grosse r√©paration ‚â• 1/4 actif ?", "radio", ["Oui", "Non"], "Comptabilit√© des immobilisations"),
    8: ("R√©habilitation ou remplacement cyclique ?", "radio", ["Oui", "Non"], "Comptabilit√© des immobilisations"),
    9: ("Identifi√© dans SAP comme investissement ?", "radio", ["Oui", "Non"], "IT / Juridique"),
    10: ("Prolonge dur√©e de vie ou augmente performance ?", "radio", ["Oui", "Non"], "Comptabilit√© des immobilisations"),
    11: ("Paiement r√©current ou √©chelonn√© ?", "radio", ["R√©current", "√âchelonn√©"], "Fournisseurs / Comptabilit√©"),

    # INCORPORELLES
    100: ("√âl√©ment identifiable ?", "radio", ["Oui", "Non"], "Comptabilit√© des immobilisations"),
    101: ("Utilisation pr√©vue > 1 an ?", "radio", ["Oui", "Non"], "Demandeur"),
    102: ("Contr√¥le + avantages √©conomiques ?", "radio", ["Oui", "Non"], "Contr√¥le de gestion"),
    103: ("Co√ªt mesurable de mani√®re fiable ?", "radio", ["Oui", "Non"], "Fournisseurs / Comptabilit√©"),
    104: ("Acquis ou cr√©√© en interne ?", "radio", ["Acquis", "Cr√©√© en interne"], "Comptabilit√© des immobilisations"),

    # CR√âATION INTERNE
    201: ("Recherche ou D√©veloppement ?", "radio", ["Recherche", "D√©veloppement"], "Comptabilit√© des immobilisations"),
    202: ("‚úî Faisabilit√© technique", "checkbox", None, "IT / Juridique"),
    203: ("‚úî Intention d‚Äôachever le projet", "checkbox", None, "IT / Juridique"),
    204: ("‚úî Capacit√© √† utiliser ou vendre l‚Äôactif", "checkbox", None, "IT / Juridique"),
    205: ("‚úî Avantages √©conomiques futurs probables", "checkbox", None, "Contr√¥le de gestion"),
    206: ("‚úî Ressources disponibles", "checkbox", None, "Contr√¥le de gestion"),
    207: ("‚úî D√©penses √©valu√©es de fa√ßon fiable", "checkbox", None, "Fournisseurs / Comptabilit√©"),

    # ACQUISITION
    105: ("L'acquisition concerne-t-elle une licence ?", "radio", ["Oui", "Non"], "IT / Juridique"),
    106: ("La licence est-elle de nature √©ph√©m√®re ?", "radio", ["Oui", "Non"], "IT / Juridique"),
    107: ("Prix d‚Äôachat ou d√©pense ?", "radio", ["Prix d'achat", "D√©pense"], "Achats"),
    135: ("‚úî Co√ªt du personnel li√© √† la mise en service", "checkbox", None, "RH"),
    136: ("‚úî Honoraires de mise en service", "checkbox", None, "Comptabilit√© des immobilisations"),
    137: ("‚úî Tests de bon fonctionnement", "checkbox", None, "Comptabilit√© des immobilisations"),
}
# üîÅ LOGIQUE DE L‚ÄôARBRE ET AFFICHAGE PAR SERVICE
def get_next_question_id():
    if 0 not in r:
        return 0
    if r[0] < 500:
        return None  # Charge directe, pas d'arbre
    if 1 not in r:
        return 1
    if r[1] == "Oui":
        for q in [2, 3, 4, 5, 6]:
            if q not in r:
                return q
        if r.get(6) == "Oui":
            return 11
        for q in [7, 8, 9, 10, 11]:
            if q not in r:
                return q
    if r[1] == "Non":
        for q in [100, 101, 102, 103, 104]:
            if q not in r:
                return q
        if r.get(104) == "Cr√©√© en interne":
            if 201 not in r:
                return 201
            if r.get(201) == "Recherche":
                return None  # Fin : charge
            for q in [202, 203, 204, 205, 206, 207]:
                if q not in r:
                    return q
        elif r.get(104) == "Acquis":
            if 105 not in r:
                return 105
            if r.get(105) == "Oui":
                if 106 not in r:
                    return 106
            elif r.get(105) == "Non":
                if 107 not in r:
                    return 107
                if r.get(107) == "D√©pense":
                    for q in [135, 136, 137]:
                        if q not in r:
                            return q
    return None  # Fin du parcours

# üîç AFFICHAGE LOGIQUE DE LA QUESTION ACTUELLE
next_q = get_next_question_id()
if next_q is not None:
    label, qtype, options, service_resp = questions[next_q]

    st.markdown("### üìå Question actuelle")
    st.markdown(f"**‚û°Ô∏è {label}**")
    st.markdown(f"üë§ Destin√©e √† : **{service_resp}**")

  if service_connecte == service_resp or service_connecte == "Comptabilit√© des immobilisations":
    key = f"q_{next_q}"
    if qtype == "number":
        val = st.number_input("R√©ponse :", min_value=0.0, format="%.2f", key=key)
    elif qtype == "radio":
        val = st.radio("R√©ponse :", options, key=key, index=None)
    elif qtype == "checkbox":
        val = st.checkbox("Cocher si applicable", key=key)

    if st.button("‚úÖ Valider la r√©ponse"):
        r[next_q] = val
        enregistrer_reponse(next_q, label, val, service_connecte)
        st.rerun()

    else:
        st.info(f"üïí En attente de r√©ponse du service **{service_resp}**")

# üëÅÔ∏è SUIVI GLOBAL POUR LE SCI
if service_connecte == "Comptabilit√© des immobilisations":
    st.markdown("### üìã Suivi en temps r√©el")
    for qid in r:
        label, _, _, who = questions[qid]
        st.markdown(f"‚úÖ **{label}** ‚Äî *{who}* : `{r[qid]}`")
# ‚úÖ CALCUL DU R√âSULTAT FINAL (r√©serv√© SCI)
if service_connecte == "Comptabilit√© des immobilisations":
    st.markdown("### ‚úÖ R√©sultat final automatique")

    result = None
    justif = []

    if r.get(0) is not None and r.get(0) < 500:
        result = "Charge"
        justif.append("Montant < 500 DT")
    elif r.get(1) == "Oui":
        if any(r.get(x) == "Non" for x in [2, 3, 4, 5, 7, 8, 9, 10]):
            result = "Charge"
            justif.append("Un ou plusieurs crit√®res corporels manquants")
        elif r.get(11) == "R√©current":
            result = "Charge"
            justif.append("Paiement r√©current")
        elif r.get(11) == "√âchelonn√©":
            result = "Immobilisation corporelle"
    elif r.get(1) == "Non":
        if any(r.get(x) == "Non" for x in [100, 101, 102, 103]):
            result = "Charge"
            justif.append("Crit√®res incorporels manquants")
        elif r.get(104) == "Cr√©√© en interne":
            if r.get(201) == "Recherche":
                result = "Charge"
                justif.append("Recherche non immobilisable")
            elif r.get(201) == "D√©veloppement":
                checks = [202, 203, 204, 205, 206, 207]
                if all(r.get(x) for x in checks):
                    result = "Immobilisation incorporelle"
                else:
                    result = "Charge"
                    justif.append("Conditions IAS 38 non remplies")
        elif r.get(104) == "Acquis":
            if r.get(105) == "Oui" and r.get(106) == "Oui":
                result = "Charge"
                justif.append("Licence √©ph√©m√®re")
            elif r.get(105) == "Oui" and r.get(106) == "Non":
                result = "Immobilisation incorporelle"
            elif r.get(105) == "Non":
                if r.get(107) == "Prix d'achat":
                    result = "Immobilisation incorporelle"
                elif r.get(107) == "D√©pense":
                    if any(r.get(x) for x in [135, 136, 137]):
                        result = "Immobilisation incorporelle"
                    else:
                        result = "Charge"
                        justif.append("D√©pense non directement attribuable")

    if result:
        st.success(f"üè∑Ô∏è **R√©sultat** : {result}")
        if justif:
            st.markdown("**Justification :**")
            for j in justif:
                st.markdown(f"- {j}")
    else:
        st.info("‚è≥ R√©sultat en attente ‚Äì toutes les r√©ponses n√©cessaires ne sont pas encore remplies.")
